"""
A RESTful web service that provides the Fibonacci number (starts from start index to end index) for
any given integer less than a predefined number

"""

import json
import logging
from logging.handlers import RotatingFileHandler
from flask import Flask, Response
from fibonacci import Fibonacci


class FibonacciServer(object):
    MAX_ACCEPTABLE_NUMBER = 10000
    MAX_LOG_FILE_BYTES = 50 << 20  # 100 MB
    MAX_LOG_FILE_BACKUP = 10
    RUNTIME_LOG = 'runtime.log'

    def __init__(self, host='127.0.0.1', port=8080):
        self.host = host
        self.port = port
        self.app = Flask(__name__)
        self.init_logging()
        self.add_routes()
        self.fib = Fibonacci()

    def index(self):
        """Handles 'GET/health' request, this helps in determining the health status
        of the api
        """
        msg = ('Welcome to the Fibonacci Server!\n\n'
               'Currently only one API is supported :\n\n'
               'GET fib/<start_idx>/<end_idx>\n'
               )
        return msg, 200, {'Content-type': 'text/plain; charset=utf-8'}

    def fib(self, start_idx, end_idx):
        """Handles the `GET /fib/<start_idx>/<end_idx>` request. Status goes to
                header, data goes to body in JSON.
                Status codes are:
                    - 200 OK
                    - 400 BAD REQUEST (invalid parameter)
                    - 403 REQUEST ENTITY TOO LARGE (input number too large)
                    - 500 INTERNAL SERVER ERROR (unknown exception)
        """
        try:
            num1 = int(start_idx)
            num2 = int(end_idx)
        except ValueError:
            return self.response(400)
        if num1 < 0 or num2 < 0:
            return self.response(400)
        elif num1 > self.MAX_ACCEPTABLE_NUMBER or num2 > self.MAX_ACCEPTABLE_NUMBER:
            return self.response(413)

        try:
            fib_sequence = self.fib.sequence(num1, num2)
            return self.response(200, fib_sequence)
        except:
            return self.response(500)

    def run(self):
        self.app.run(host=self.host, port=self.port)

    def init_logging(self):
        """Configure web log generated by werkzeug to use 'runtime.log'
        """
        handler = RotatingFileHandler(
            self.RUNTIME_LOG, maxBytes=self.MAX_LOG_FILE_BYTES,
            backupCount=self.MAX_LOG_FILE_BACKUP)
        logger = logging.getLogger('werkzeug')
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)  # Turns off console log

    def add_routes(self):
        self.app.add_url_rule('/health', endpoint='index', view_func=self.index)
        self.app.add_url_rule(
            '/fib/<start_idx>/<end_idx>', endpoint='fib', view_func=self.fib)

    def response(self, status, data=None):
        data = data or []
        return Response(json.dumps(data), status=status,
                        mimetype='application/json')

    def test_client(self):
        return self.app.test_client()


if __name__ == '__main__':
    from optparse import OptionParser

    parser = OptionParser(usage='%prog [options]')
    parser.add_option('-b', '--bind', default='127.0.0.1',
                      help=('Bind address, default 127.0.0.1, use '
                            '"0.0.0.0" for all'))
    parser.add_option('-p', '--port', type='int', default=8080,
                      help='Listen port, default is 8080')
    opts, _ = parser.parse_args()

    server = FibonacciServer(host=opts.bind, port=opts.port)
    server.run()
